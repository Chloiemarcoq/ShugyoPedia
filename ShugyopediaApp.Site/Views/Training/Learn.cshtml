@using ShugyopediaApp.Services.ServiceModels;
@{
    ViewData["Title"] = "Shugyopedia";
}
@model LearnTrainingViewModel

<main class="main" style="margin-top: 170px;">
    <div class="pos-img">
        <img src="~/img/bg-shape1.png" alt="HTML tutorial" class="w-100" />
    </div>
    <div class="container my-4">
        <div class="row">
            @* Video Topic Resource *@
            <div class="col-8">
                <div id="pdf-container">
                    @foreach (var topic in Model.Topics)
                    {
                        <iframe src="@topic.ResourceFile" height="350" width="575" id="pdf-viewer"></iframe>
                        break;
                    }
                </div>
            </div>
            <div class="col-4">
                <div class="card" style="height: 330px;">
                    <div class="card-header">
                        <div class="d-flex justify-content-center align-items-center">
                            <p class="fs-3 m-0">@Model.Topics.Count @((Model.Topics.Count >= 1) ? "Lessons" : "Lesson")</p>
                        </div>
                    </div>
                    <div class="card-body overflow-y-scroll">
                        <p class="card-text">
                            <ol>
                                @foreach (var topic in Model.Topics)
                                {
                                    <li class="fs-4" onclick="changeFile('@topic.ResourceFile')" style="cursor: pointer;">@topic.TopicName</li>
                                }
                            </ol>
                        </p>
                    </div>
                </div>
            </div>
            <ul class="nav-tabs nav-tabs-bordered d-flex mt-5" id="tab" role="tablist" style="list-style: none;">
                <li class="nav-item flex-fill" role="presentation">
                    <button class="nav-link w-100 active" id="home-tab" data-bs-toggle="tab"
                            data-bs-target="#details" type="button" role="tab">
                        Details
                    </button>
                </li>
                <li class="nav-item flex-fill" role="presentation">
                    <button class="nav-link w-100" id="profile-tab" data-bs-toggle="tab" data-bs-target="#reviews"
                            type="button" role="tab">
                        Reviews
                    </button>
                </li>
                <li class="nav-item flex-fill" role="presentation">
                    <button class="nav-link w-100" id="contact-tab" data-bs-toggle="tab" data-bs-target="#resources"
                            type="button" role="tab">
                        Resources
                    </button>
                </li>
            </ul>
            @await Html.PartialAsync("_LearnTabPartialView")
        </div>
    </div>
</main>
@await Component.InvokeAsync("TrainingCategorySidebar")
@await Component.InvokeAsync("Chatbox")
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const showButtons = document.querySelectorAll('.read-more-show');
        const hideButtons = document.querySelectorAll('.read-more-hide');
        const contents = document.querySelectorAll('.read-more-content');

        for (let i = 0; i < showButtons.length; i++) {
            const showButton = showButtons[i];
            const hideButton = hideButtons[i];
            const content = contents[i];

            showButton.addEventListener('click', function () {
                content.style.webkitLineClamp = 'unset';
                showButton.style.display = 'none';
                hideButton.style.display = 'inline';
            });

            hideButton.addEventListener('click', function () {
                content.style.webkitLineClamp = '2';
                showButton.style.display = 'inline';
                hideButton.style.display = 'none';
            });
        }
    });
    document.getElementById("downloadButton").addEventListener("click", function (event) {
        event.preventDefault();
        var downloadUrl = this.getAttribute("href");
        window.location.href = downloadUrl;
    });
    document.getElementById("select-all").addEventListener("change", function () {
        var checkboxes = document.getElementsByName("checkboxes");
        for (var i = 0; i < checkboxes.length; i++) {
            checkboxes[i].checked = this.checked;
        }
    });

    var checkboxes = document.getElementsByName("checkboxes");
    for (var i = 0; i < checkboxes.length; i++) {
        checkboxes[i].addEventListener("change", function () {
            var selectAllCheckbox = document.getElementById("select-all");
            var allChecked = true;
            for (var j = 0; j < checkboxes.length; j++) {
                if (!checkboxes[j].checked) {
                    allChecked = false;
                    break;
                }
            }
            selectAllCheckbox.checked = allChecked;
        });
    }

    $(document).ready(function () {
        $('#datatable').DataTable();
    });

    $(document).ready(function () {
        $('#datatable').DataTable({
            "paging": true,
            "ordering": true,
            "searching": true
        });
    });

    function changeFile(fileSource) {
        var pdfResource = document.getElementById('pdf-viewer');
        pdfResource.src = fileSource;
        pdfResource.load();
        pdfResource.pause();

        document.getElementById('video-container').style.display = 'block';
        document.getElementById('pdf-container').style.display = 'block';
    }
</script>
}